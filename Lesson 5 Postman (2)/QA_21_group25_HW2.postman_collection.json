{
	"info": {
		"_postman_id": "b51cae14-f3d5-4ed4-a823-02fdac1331f2",
		"name": "QA_21_group25_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token;\r",
							"console.log(\"Token =\" + resp_token);\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Vadim",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**2. Статус код 200 */\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**1. Отправить запрос.\r",
							"2. Статус код 200 */\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Roman",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**1. Отправить запрос.\r",
							"2. Статус код 200 */\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"/**3. Спарсить response body в json. */\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"/**4. Проверить, что name в ответе равно name s request (name вбить руками.) */\r",
							"pm.test(\"Your name = Roman\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Roman\");\r",
							"});\r",
							"\r",
							"/**5. Проверить, что age в ответе равно age s request (age вбить руками.) */\r",
							"pm.test(\"Your age = 32\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"/**6. Проверить, что salary в ответе равно salary s request (salary вбить руками.) */\r",
							"pm.test(\"Your salary = 1000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"/**7. Спарсить request. */\r",
							"var reqData = request.data;\r",
							"\r",
							"/**8. Проверить, что name в ответе равно name s request (name забрать из request.) */\r",
							"pm.test(\"user name\", function () {\r",
							"    pm.expect(reqData.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"/**9. Проверить, что age в ответе равно age s request (age забрать из request.) */\r",
							"pm.test(\"user age\", function () {\r",
							"    pm.expect(reqData.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"/**10. Проверить, что salary в ответе равно salary s request (salary забрать из request.) */\r",
							"pm.test(\"user salary\", function () {\r",
							"    pm.expect(+reqData.salary).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"/**11. Вывести в консоль параметр family из response. */\r",
							"console.log(jsonData.family);\r",
							"\r",
							"/**12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request) */\r",
							"pm.test(\"user salary 1.5 year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Roman",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**1. Отправить запрос.\r",
							"2. Статус код 200 */\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**3. Спарсить response body в json. */\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"/**4. Спарсить request. */\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"//var reqData = pm.request.toJSON().url.query; //способ 2 (но надо обращаться с элементу массива)\r",
							"\r",
							"console.log(reqData);\r",
							"\r",
							"/**5. Проверить, что name в ответе равно name s request (name забрать из request.) */\r",
							"pm.test(\"user name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"/**6. Проверить, что age в ответе равно age s request (age забрать из request.) */\r",
							"pm.test(\"user age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"/**7. Проверить, что salary в ответе равно salary s request (salary забрать из request.) */\r",
							"pm.test(\"user salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"/**8. Вывести в консоль параметр family из response. */\r",
							"console.log(jsonData.family);\r",
							"\r",
							"/**9. Проверить, что у параметра dog есть параметры name. */\r",
							"pm.test(\"dog have name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"/**10. Проверить, что у параметра dog есть параметры age. */\r",
							"pm.test(\"dog have age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"/**11. Проверить, что параметр name имеет значение Luky. */\r",
							"pm.test(\"dog have name - Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"/**12. Проверить, что параметр age имеет значение 4. */\r",
							"pm.test(\"dog have age - 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"console.log(jsonData.family.pets.dog);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Roman&age=32&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Roman"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**1. Отправить запрос.\r",
							"2. Статус код 200 */\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**3. Спарсить response body в json. */\r",
							"var jsonData = pm.response.json();\r",
							"//console.log(jsonData);\r",
							"\r",
							"/**4. Спарсить request. */\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"/**5. Проверить, что name в ответе равно name s request (name забрать из request.) */\r",
							"pm.test(\"user name\", function () {\r",
							"    pm.expect(jsonData.name).eql(reqData.name);\r",
							"});\r",
							"\r",
							"/**6. Проверить, что age в ответе равно age из request (age забрать из request.) */\r",
							"pm.test(\"user age\", function () {\r",
							"    pm.expect(jsonData.age).eql(+reqData.age);\r",
							"});\r",
							"\r",
							"/**7. Вывести в консоль параметр salary из request. */\r",
							"console.log(jsonData.salary);\r",
							"/**8. Вывести в консоль параметр salary из response. */\r",
							"console.log(reqData.salary);\r",
							"/**9. Вывести в консоль 0-й элемент параметра salary из response. */\r",
							"console.log(jsonData.salary[0]);\r",
							"/**10. Вывести в консоль 1-й элемент параметра salary параметр salary из response. */\r",
							"console.log(jsonData.salary[1]);\r",
							"/**11. Вывести в консоль 2-й элемент параметра salary параметр salary из response. */\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"/**12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.) */\r",
							"pm.test(\"salary resp[0] = salary req\", function() {\r",
							"    pm.expect(jsonData.salary[0]).eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"/**13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.) */\r",
							"pm.test(\"salary resp[1] = salary req *2\", function() {\r",
							"    pm.expect(+jsonData.salary[1]).eql(+reqData.salary * 2);\r",
							"});\r",
							"\r",
							"/**14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.) */\r",
							"pm.test(\"salary resp[2] = salary req *3\", function() {\r",
							"    pm.expect(+jsonData.salary[2]).eql(+reqData.salary * 3)\r",
							"})\r",
							"\r",
							"/**15. Создать в окружении переменную name(через переменную засунуть в окружение) && 18. Передать в окружение переменную name*/\r",
							"var name = reqData.name;\r",
							"pm.environment.set(\"name\", name);\r",
							"/**16. Создать в окружении переменную age && 19. Передать в окружение переменную age */\r",
							"pm.environment.set(\"age\", reqData.age);\r",
							"/**17. Создать в окружении переменную salary && 20. Передать в окружение переменную salary*/\r",
							"pm.environment.set(\"salary\", reqData.salary);\r",
							"\r",
							"/**21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary. */\r",
							"for(i=0;i<jsonData.salary.length;i++){\r",
							"    console.log(jsonData.salary[i])}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Roman&age=32&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Roman"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**1. Вставить параметр salary из окружения в request\r",
							"2. Вставить параметр age из окружения в age\r",
							"3. Вставить параметр name из окружения в name\r",
							"4. Отправить запрос. */\r",
							"/**5. Статус код 200 */\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"/**6. Спарсить response body в json. */\r",
							"var jsonData = pm.response.json();\r",
							"/**7. Спарсить request. */\r",
							"var reqData = request.data;\r",
							"\r",
							"/**8. Проверить, что json response имеет параметр start_qa_salary */\r",
							"pm.test(\"json have parms start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"/**9. Проверить, что json response имеет параметр qa_salary_after_6_months */\r",
							"pm.test(\"json have parms qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"/**10. Проверить, что json response имеет параметр qa_salary_after_12_months */\r",
							"pm.test(\"json have parms qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"/**11. Проверить, что json response имеет параметр qa_salary_after_1.5_year */\r",
							"pm.test(\"json have parms qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"/**12. Проверить, что json response имеет параметр qa_salary_after_3.5_years */\r",
							"pm.test(\"json have parms qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"/**13. Проверить, что json response имеет параметр person */\r",
							"pm.test(\"json have parms person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"/**14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.) */\r",
							"pm.test(\"start_qa_salary = salary\", function() {\r",
							"    pm.expect(+jsonData.start_qa_salary).eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"/**15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.) */\r",
							"pm.test(\"start_qa_salary_after_6_months = salary*2\", function() {\r",
							"    pm.expect(+jsonData.qa_salary_after_6_months).eql(reqData.salary*2);\r",
							"});\r",
							"\r",
							"/**16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.) */\r",
							"pm.test(\"start_qa_salary_after_12_months = salary*2.7\", function() {\r",
							"    pm.expect(+jsonData.qa_salary_after_12_months).eql(reqData.salary*2.7);\r",
							"});\r",
							"\r",
							"/**17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.) */\r",
							"//Если имя свойства (или метода) включает в себя пробелы или знаки пунктуации, или когда оно является числом, необходимо использовать оператор [] (квадратные скобки)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function() {\r",
							"    pm.expect(+jsonData['qa_salary_after_1.5_year']).eql(reqData.salary*3.3);\r",
							"});\r",
							"\r",
							"/**18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.) */\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function() {\r",
							"    pm.expect(+jsonData['qa_salary_after_3.5_years']).eql(reqData.salary*3.8);\r",
							"});\r",
							"\r",
							"/**19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.) */\r",
							"pm.test(\"person/u_name = salary\", function() {\r",
							"    pm.expect(+jsonData.person.u_name[1]).eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"/**20. Проверить, что что параметр u_age равен age из request (age забрать из request.) */\r",
							"pm.test(\"person/u_age = age\", function() {\r",
							"    pm.expect(+jsonData.person.u_age).eql(+reqData.age)\r",
							"});\r",
							"\r",
							"/**21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.) */\r",
							"pm.test(\"u_salary_5_years = salary*4.2\", function() {\r",
							"    pm.expect(+jsonData.person.u_salary_5_years).eql(reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"console.log(jsonData.person);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}